# -*- coding: utf-8 -*-

from flask import Flask, request, jsonify
import hashlib
import hmac
import base64
import json
import os
from datetime import datetime

app = Flask(__name__)

# Configuraci√≥n
SECRET_KEY = os.getenv('GOOGLE_WEBHOOK_SECRET', '')  # Vac√≠o inicialmente
PORT = int(os.getenv('PORT', 5000))

# Logging
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def verify_signature(request_data, signature_header):
    """
    Verifica la firma de la solicitud de Google
    Solo se ejecuta si SECRET_KEY est√° configurado
    """
    # Si no hay secret configurado, permitir la solicitud (fase de validaci√≥n)
    if not SECRET_KEY:
        logger.info("‚ö†Ô∏è SECRET_KEY no configurado - Modo validaci√≥n")
        return True
    
    if not signature_header:
        logger.warning("‚ùå No se recibi√≥ header X-Goog-Signature")
        return False
    
    try:
        # Crear el hash HMAC
        expected_signature = hmac.new(
            SECRET_KEY.encode('utf-8'),
            request_data,
            hashlib.sha512
        ).digest()
        
        # Codificar en base64
        expected_signature_b64 = base64.encodebytes(expected_signature).decode('utf-8').strip()
        
        # Comparar de forma segura
        is_valid = hmac.compare_digest(expected_signature_b64, signature_header)
        
        if is_valid:
            logger.info("‚úÖ Firma verificada correctamente")
        else:
            logger.warning("‚ùå Firma inv√°lida")
        
        return is_valid
    
    except Exception as e:
        logger.error(f"‚ùå Error verificando firma: {e}")
        return False


@app.route('/', methods=['GET'])
def home():
    """
    Endpoint de informaci√≥n
    """
    return jsonify({
        'status': 'online',
        'service': 'Google RCS Business Messaging Webhook',
        'timestamp': datetime.utcnow().isoformat(),
        'validation_mode': not bool(SECRET_KEY),
        'endpoints': {
            'webhook': '/webhook',
            'health': '/health'
        }
    }), 200


@app.route('/webhook', methods=['POST'])
def webhook():
    """
    Endpoint principal para recibir mensajes de Google RCS.
    Maneja tanto mensajes directos como mensajes empaquetados (Pub/Sub).
    """
    try:
        logger.info("=" * 50)
        logger.info("üì® Nueva solicitud recibida")
        
        # Obtener el contenido de la solicitud
        request_data = request.get_data()
        signature = request.headers.get('X-Goog-Signature')
        
        logger.info(f"Signature recibida: {signature if signature else 'NINGUNA'}")
        logger.info(f"Tama√±o del payload: {len(request_data)} bytes")
        
        # Verificar firma (solo si SECRET_KEY est√° configurado)
        if not verify_signature(request_data, signature):
            logger.warning("‚ùå Verificaci√≥n de firma fall√≥")
            return jsonify({'error': 'Invalid signature'}), 401
        
        # Parsear JSON
        data = request.get_json()
        
        if not data:
            logger.warning("‚ùå No se recibi√≥ data JSON")
            return jsonify({'error': 'No data received'}), 400
        
        # --- ESTA L√çNEA YA IMPRIME EL JSON COMPLETO PARA DEPURACI√ìN ---
        logger.info(f"üì¶ Payload recibido:\n{json.dumps(data, indent=2)}")
        
        # =======================================================================
        # L√ìGICA ACTUALIZADA PARA MANEJAR MENSAJES EMPAQUETADOS Y DIRECTOS
        # =======================================================================
        
        # Caso especial: Verificaci√≥n inicial de Google
        if 'clientToken' in data and 'secret' in data:
            logger.info("üîë Recibida petici√≥n de verificaci√≥n especial.")
            verification_secret = data.get('secret')
            client_token = data.get('clientToken')
            logger.info(f"üîì Respondiendo 200 OK con el secreto: {verification_secret} (para clientToken: {client_token})")
            return jsonify({'secret': verification_secret}), 200

        # Determinar si es un mensaje empaquetado (Pub/Sub) o directo
        message_data = data.get('message', {})
        attributes = message_data.get('attributes', {})

        if attributes and 'message_type' in attributes:
            # --- ES UN MENSAJE EMPAQUETADO (Pub/Sub) ---
            logger.info("üì¶ Mensaje detectado en formato Pub/Sub. Desempaquetando...")
            
            # 1. Decodificar el contenido
            encoded_data = message_data.get('data', '')
            decoded_bytes = base64.b64decode(encoded_data)
            real_data = json.loads(decoded_bytes.decode('utf-8'))
            
            logger.info("‚úÖ Mensaje desempaquetado correctamente.")
            logger.info(f"üì¶ Contenido real:\n{json.dumps(real_data, indent=2)}")
            
            # 2. Obtener el tipo de mensaje real desde los atributos
            message_type = attributes.get('message_type')
            logger.info(f"üìå Tipo de evento real (desde atributos): {message_type}")
            
            
           # 3. Llamar al manejador correcto con los datos desempaquetados
            if message_type == 'SUGGESTION_RESPONSE':
                handle_suggestion_response(real_data)
            elif message_type == 'TEXT':  # <-- ¬°A√ëADE ESTA L√çNEA!
                handle_message(real_data)
            elif message_type == 'message': # Este se queda como fallback
                handle_message(real_data)
            else:
                logger.warning(f"‚ö†Ô∏è Tipo de mensaje no manejado: {message_type}")

        else:
            # --- ES UN MENSAJE DIRECTO (como el de curl o la verificaci√≥n) ---
            logger.info("üì¨ Mensaje detectado en formato directo.")
            
            # Usar la l√≥gica original para determinar el tipo de evento
            event_type = detect_event_type(data)
            logger.info(f"üìå Tipo de evento (directo): {event_type}")
            
            if event_type == 'message':
                handle_message(data)
            elif event_type == 'userStatus':
                handle_user_status(data)
            elif event_type == 'receipt':
                handle_receipt(data)
            else:
                logger.warning(f"‚ö†Ô∏è Tipo de evento desconocido: {list(data.keys())}")
        
        # =======================================================================
        # FIN DE LA L√ìGICA ACTUALIZADA
        # =======================================================================
        
        # Responder con 200 OK (MUY IMPORTANTE para validaci√≥n de Google)
        logger.info("‚úÖ Respondiendo 200 OK")
        logger.info("=" * 50)
        return jsonify({'status': 'success'}), 200
    
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå Error parseando JSON: {e}")
        return jsonify({'error': 'Invalid JSON'}), 400
    
    except Exception as e:
        logger.error(f"‚ùå Error procesando webhook: {e}", exc_info=True)
        return jsonify({'error': 'Internal server error'}), 500


def detect_event_type(data):
    """
    Detecta el tipo de evento recibido (para mensajes directos)
    """
    if 'message' in data:
        return 'message'
    elif 'userStatus' in data:
        return 'userStatus'
    elif 'receipt' in data:
        return 'receipt'
    elif 'suggestionResponse' in data:
        return 'suggestionResponse'
    else:
        return 'unknown'


# =============================================================================
# FUNCI√ìN MEJORADA PARA MANEJAR MENSAJES (ahora recibe datos ya procesados)
# =============================================================================
def handle_message(data):
    """
    Procesa los mensajes de texto o con contenido rico.
    Ahora busca el texto en las claves correctas tanto para mensajes simples como complejos.
    """
    logger.info("üöÄ Iniciando procesamiento de un nuevo mensaje...")
    
    # 1. Extraer informaci√≥n del remitente
    sender_phone = data.get('senderPhoneNumber', 'Desconocido')
    message_id = data.get('messageId', 'ID_No_Disponible')
    timestamp = data.get('sendTime', 'Timestamp_No_Disponible')

    # 2. Extraer el contenido del mensaje de forma flexible
    message_content = data.get('textEvent', {}) # Busca en el contenido del evento
    text_content = message_content.get('text') # Extrae el texto de ah√≠
    
    # Si no lo encontr√≥, busca en la ra√≠z del mensaje (para mensajes simples)
    if not text_content:
        text_content = data.get('text', 'Mensaje sin texto')

    # 3. Imprimir cabecera del mensaje procesado
    print("\n" + "="*50)
    print(f"üí¨ NUEVO MENSAJE RECIBIDO DE: {sender_phone}")
    print("="*50)
    print(f"üìù Tipo: Mensaje de Texto")
    print(f"   Contenido: '{text_content}'")
    print(f"üÜî ID del Mensaje: {message_id}")
    print(f"‚è∞ Enviado a las: {timestamp}")
    print("="*50 + "\n")

    # 4. L√≥gica de Negocio (Aqu√≠ es donde t√∫ a√±adir√≠as tu c√≥digo)
    if "hola" in text_content.lower():
        print("ü§ñ Se detect√≥ un saludo. Aqu√≠ podr√≠as enviar una respuesta autom√°tica.")
    
    logger.info(f"‚úÖ Mensaje de '{sender_phone}' procesado correctamente.")


# =============================================================================
# FUNCI√ìN PARA MANEJAR RESPUESTAS A SUGERENCIAS
# =============================================================================
def handle_suggestion_response(data):
    """
    Maneja respuestas a sugerencias (botones, acciones sugeridas).
    Asume que 'data' es el JSON ya desempaquetado y limpio.
    """
    logger.info("üöÄ Iniciando procesamiento de una respuesta a sugerencia...")
    
    sender_phone = data.get('senderPhoneNumber', 'Desconocido')
    message_id = data.get('messageId', 'ID_No_Disponible')
    
    suggestion_response = data.get('suggestionResponse', {})
    postback_data = suggestion_response.get('postbackData', '')
    text = suggestion_response.get('text', '')
    
    print("\n" + "="*50)
    print(f"üîò RESPUESTA A SUGERENCIA RECIBIDA DE: {sender_phone}")
    print("="*50)
    print(f"   Texto: '{text}'")
    print(f"   Postback Data: '{postback_data}'")
    print("="*50 + "\n")

    # TODO: Implementar l√≥gica seg√∫n el postback
    logger.info(f"‚úÖ Respuesta a sugerencia de '{sender_phone}' procesada correctamente.")


# =============================================================================
# FUNCIONES PARA OTROS EVENTOS (sin cambios)
# =============================================================================
def handle_user_status(data):
    """Maneja cambios de estado del usuario (typing indicators)."""
    user_status = data.get('userStatus', {})
    sender_id = data.get('senderPhoneNumber', 'Unknown')
    is_typing = user_status.get('isTyping', False)
    logger.info(f"‚å®Ô∏è Estado de usuario: {sender_id} est√° {'escribiendo...' if is_typing else 'inactivo'}.")

def handle_receipt(data):
    """Maneja confirmaciones de entrega/lectura."""
    receipt = data.get('receipt', {})
    message_id = receipt.get('messageId', 'Unknown')
    receipt_type = receipt.get('receiptType', 'Unknown')
    logger.info(f"üìß Recibo: Mensaje {message_id} marcado como '{receipt_type}'.")


@app.route('/health', methods=['GET'])
def health():
    """Endpoint de health check para monitoreo."""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.utcnow().isoformat(),
        'secret_configured': bool(SECRET_KEY)
    }), 200


if __name__ == '__main__':
    if not SECRET_KEY:
        logger.warning("‚ö†Ô∏è" * 20)
        logger.warning("‚ö†Ô∏è MODO VALIDACI√ìN: SECRET_KEY no configurado")
        logger.warning("‚ö†Ô∏è El webhook aceptar√° todas las solicitudes")
        logger.warning("‚ö†Ô∏è Configura GOOGLE_WEBHOOK_SECRET despu√©s de la validaci√≥n")
        logger.warning("‚ö†Ô∏è" * 20)
    
    app.run(
        host='0.0.0.0',
        port=PORT,
        debug=os.getenv('FLASK_ENV') == 'development'
    )